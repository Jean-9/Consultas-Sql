{"version":3,"sources":["Ace.tsx","index.tsx"],"names":["withStreamlitConnection","_ref","args","theme","colors","setColors","useState","changed","setChanged","editorRef","useRef","debounceRef","timeout","updateStreamlit","value","Streamlit","setComponentValue","toUpperCase","useEffect","current","editor","commands","removeCommand","addCommand","name","bindKey","mac","win","exec","autoUpdate","selection","clearSelection","navigateLineEnd","insert","getValue","completer","Array","isArray","customCompleter","getCompletions","session","pos","prefix","callback","line","getLine","row","cursorColumn","column","match","substring","lastWord","filter","item","startsWith","map","caption","meta","completers","palette","primary","main","primaryColor","background","default","backgroundColor","text","textColor","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","onChange","clearTimeout","setTimeout","width","height","maxLines","Infinity","resizeObserver","ResizeObserver","entries","setFrameHeight","contentRect","_jsx","ref","element","observe","disconnect","children","MuiThemeProvider","createTheme","Paper","AceEditor","ReactDOM","render","React","StrictMode","Ace","document","getElementById"],"mappings":"uQAmKeA,kBA5IHC,IAAgC,IAA/B,KAAEC,EAAI,MAAEC,GAAiBF,EACpC,MAAOG,EAAQC,GAAaC,mBAAc,CAAC,IACpCC,EAASC,GAAcF,oBAAkB,GAC1CG,EAAYC,iBAAmB,MAC/BC,EAAcD,iBAAe,GAEnC,IAAIE,EAGJ,MAAMC,EAAmBC,IACvBC,IAAUC,kBAAkBF,EAAMG,eAClCT,GAAW,IAkBbU,oBAAU,KACV,IAAKT,EAAUU,QAAS,OAExB,MAAMC,EAASX,EAAUU,QAAQC,OAoBjC,GAlBAA,EAAOC,SAASC,cAAc,gBAC9BF,EAAOC,SAASE,WAAW,CACzBC,KAAM,kBACNC,QAAS,CAAEC,IAAK,aAAcC,IAAK,eACnCC,KAAOR,IACDlB,EAAK2B,YACPT,EAAOU,UAAUC,iBACjBX,EAAOY,kBACPZ,EAAOa,OAAO,OACL1B,GACTM,EAAgBO,EAAOc,eAK7BvB,EAAYQ,QAAUjB,EAAK2B,WAAa,IAAM,EAG1C3B,EAAKiC,WAAaC,MAAMC,QAAQnC,EAAKiC,WAAY,CACnD,MAAMG,EAAkB,CAC1BC,eAAgB,SAAUnB,EAAaoB,EAAcC,EAAUC,EAAaC,GAC5E,MAAMC,EAAOJ,EAAQK,QAAQJ,EAAIK,KAC3BC,EAAeN,EAAIO,OAInBC,EAHmBL,EAAKM,UAAU,EAAGH,GAGZE,MAAM,UAC/BE,GAAYF,EAAQA,EAAM,GAAK,IAAIhC,cAazC0B,EAAS,KAXOzC,EAAKiC,UAClBiB,OAAQC,IACQA,EAAKvC,OAAS,IAAIG,cACpBqC,WAAWH,IAEzBI,IAAKF,IAAS,CACbvC,MAAOuC,EAAKvC,MACZ0C,QAASH,EAAKvC,MACd2C,KAAMJ,EAAKI,MAAQ,YAIzB,GAIIrC,EAAOsC,WAAa,CAACpB,EACvB,GAKC,IAGDpB,oBAAU,KACRb,EAAU,CACRsD,QAAS,CACPC,QAAS,CACPC,KAAW,OAAL1D,QAAK,IAALA,OAAK,EAALA,EAAO2D,aACbC,WAAY,CACVC,QAAc,OAAL7D,QAAK,IAALA,OAAK,EAALA,EAAO8D,iBAElBC,KAAM,CACJN,QAAc,OAALzD,QAAK,IAALA,OAAK,EAALA,EAAOgE,gBAKvB,CAAM,OAALhE,QAAK,IAALA,OAAK,EAALA,EAAO2D,aAAmB,OAAL3D,QAAK,IAALA,OAAK,EAALA,EAAO8D,gBAAsB,OAAL9D,QAAK,IAALA,OAAK,EAALA,EAAOgE,YAIxDjE,EAAKkE,2BAA4B,EACjClE,EAAKmE,0BAA2B,EAChCnE,EAAKoE,gBAAiB,EACtBpE,EAAKqE,SA9FiBzD,IACpB0D,aAAa5D,GAEbA,EAAU6D,WAAW,KACfvE,EAAK2B,WACPhB,EAAgBC,GAGhBN,GAAW,IAEZ,MAqFLN,EAAKwE,MAAQ,OAGRxE,EAAKyE,SACRzE,EAAK0E,SAAWC,KAGlB,MAAMC,EAAiB,IAAIC,eAAgBC,IACzCjE,IAAUkE,eAAeD,EAAQ,GAAGE,YAAYP,OAAS,MAU3D,OACEQ,cAAA,OAAKC,IARiBC,IACN,OAAZA,EACFP,EAAeQ,QAAQD,GAEvBP,EAAeS,cAIQC,SACvBL,cAACM,IAAgB,CAACtF,MAAOuF,YAAYtF,GAAQoF,SAC3CL,cAACQ,IAAK,CAAAH,SACJL,cAACS,IAAS,CAACR,IAAK3E,KAAeP,YCtJzC2F,IAASC,OACPX,cAACY,IAAMC,WAAU,CAAAR,SACfL,cAACc,EAAG,MAENC,SAASC,eAAe,Q","file":"static/js/main.bc5555ec.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\"\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n  Theme,\n} from \"streamlit-component-lib\"\nimport AceEditor from \"react-ace\"\nimport { IAceEditor } from \"react-ace/lib/types\"\nimport { Paper, Button, Grid } from \"@material-ui/core\"\nimport { MuiThemeProvider, createTheme } from \"@material-ui/core/styles\"\n\nimport \"ace-builds/webpack-resolver\"\nimport \"ace-builds/src-min-noconflict/ext-emmet\"\nimport \"ace-builds/src-min-noconflict/ext-language_tools\"\n\nimport \"./index.css\" // Aqui estÃ¡ o estilo visual para deixar o texto em maiÃºsculo\n\ninterface AceProps extends ComponentProps {\n  args: any\n  theme?: Theme\n}\n\nconst Ace = ({ args, theme }: AceProps) => {\n  const [colors, setColors] = useState<any>({})\n  const [changed, setChanged] = useState<boolean>(false)\n  const editorRef = useRef<IAceEditor>(null)\n  const debounceRef = useRef<number>(0)\n\n  let timeout: NodeJS.Timeout\n\n  // Send editor content to streamlit\n  const updateStreamlit = (value: string) => {\n    Streamlit.setComponentValue(value.toUpperCase()) // forÃ§a o valor em maiÃºsculo\n    setChanged(false)\n  }\n\n  // Called on editor update\n  const handleChange = (value: string) => {\n    clearTimeout(timeout)\n\n    timeout = setTimeout(() => {\n      if (args.autoUpdate) {\n        updateStreamlit(value)\n      }\n      else {\n        setChanged(true)\n      }\n    }, 2000) // debounceRef.current)\n  }\n\n  // Update content keybinding\n  useEffect(() => {\n  if (!editorRef.current) return\n\n  const editor = editorRef.current.editor\n\n  editor.commands.removeCommand(\"addLineAfter\")\n  editor.commands.addCommand({\n    name: \"updateStreamlit\",\n    bindKey: { mac: \"cmd-return\", win: \"ctrl-return\" },\n    exec: (editor: IAceEditor) => {\n      if (args.autoUpdate) {\n        editor.selection.clearSelection()\n        editor.navigateLineEnd()\n        editor.insert(\"\\n\")\n      } else if (changed) {\n        updateStreamlit(editor.getValue())\n      }\n    },\n  })\n\n  debounceRef.current = args.autoUpdate ? 200 : 0\n\n  // ðŸ”§ Setup custom autocomplete\n  if (args.completer && Array.isArray(args.completer)) {\n    const customCompleter = {\n  getCompletions: function (editor: any, session: any, pos: any, prefix: any, callback: any) {\n  const line = session.getLine(pos.row)\n  const cursorColumn = pos.column\n  const textBeforeCursor = line.substring(0, cursorColumn)\n\n  // Extrai a Ãºltima \"palavra\" vÃ¡lida (para prefixo real)\n  const match = textBeforeCursor.match(/(\\w+)$/)\n  const lastWord = (match ? match[1] : \"\").toUpperCase()\n\n  const results = args.completer\n    .filter((item: any) => {\n      const value = (item.value || \"\").toUpperCase()\n      return value.startsWith(lastWord)\n    })\n    .map((item: any) => ({\n      value: item.value,\n      caption: item.value,\n      meta: item.meta || \"custom\"\n    }))\n\n  callback(null, results)\n}\n}\n\n    // Sobrescreve todos os completers com apenas o nosso\n    editor.completers = [customCompleter]\n  }\n\n  // ðŸ”  ForÃ§a o texto digitado em maiÃºsculo\n\n\n}, [])  // <- fim do useEffect\n\n  // Update theme\n  useEffect(() => {\n    setColors({\n      palette: {\n        primary: {\n          main: theme?.primaryColor,\n          background: {\n            default: theme?.backgroundColor,\n          },\n          text: {\n            primary: theme?.textColor,\n          }\n        }\n      }\n    })\n  }, [theme?.primaryColor, theme?.backgroundColor, theme?.textColor])\n\n\n  // Set default prop values that shouldn't be exposed to python\n  args.enableBasicAutocompletion = true\n  args.enableLiveAutocompletion = true\n  args.enableSnippets = true\n  args.onChange = handleChange\n  args.width = \"100%\"\n\n  // Auto height\n  if (!args.height) {\n    args.maxLines = Infinity\n  }\n\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    Streamlit.setFrameHeight(entries[0].contentRect.height + 15)\n  })\n\n  const observeElement = (element: HTMLDivElement | null) => {\n    if (element !== null)\n      resizeObserver.observe(element)\n    else\n      resizeObserver.disconnect()\n  }\n\n  return (\n    <div ref={observeElement}>\n      <MuiThemeProvider theme={createTheme(colors)}>\n        <Paper>\n          <AceEditor ref={editorRef} {...args} />\n        </Paper>\n\n      </MuiThemeProvider>\n    </div>\n  )\n}\n\nexport default withStreamlitConnection(Ace)","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Ace from \"./Ace\"\nimport \"./index.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Ace />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}