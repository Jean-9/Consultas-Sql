{"code":"ace.define(\"ace/ext/linking\",[\"require\",\"exports\",\"module\",\"ace/editor\",\"ace/config\"],function(e,o,i){var n=e(\"../editor\").Editor;function t(e){var i=e.editor;if(e.getAccelKey()){i=e.editor;var n=e.getDocumentPosition(),t=i.session.getTokenAt(n.row,n.column);o.previousLinkingHover&&o.previousLinkingHover!=t&&i._emit(\"linkHoverOut\"),i._emit(\"linkHover\",{position:n,token:t}),o.previousLinkingHover=t}else o.previousLinkingHover&&(i._emit(\"linkHoverOut\"),o.previousLinkingHover=!1)}function r(e){var o=e.getAccelKey();if(0==e.getButton()&&o){var i=e.editor,n=e.getDocumentPosition(),t=i.session.getTokenAt(n.row,n.column);i._emit(\"linkClick\",{position:n,token:t})}}e(\"../config\").defineOptions(n.prototype,\"editor\",{enableLinking:{set:function(e){e?(this.on(\"click\",r),this.on(\"mousemove\",t)):(this.off(\"click\",r),this.off(\"mousemove\",t))},value:!1}}),o.previousLinkingHover=!1}),ace.require([\"ace/ext/linking\"],function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)});","name":"47c3feea3b6771ecc78ecda042eca187.js","input":"ace.define(\"ace/ext/linking\", [\"require\", \"exports\", \"module\", \"ace/editor\", \"ace/config\"], function (require, exports, module) {\n  /**\n  * ## Interactive Linking Extension\n  *\n  * Enables clickable links and hover interactions in the editor when the Control key is pressed. Provides\n  * keyboard-accelerated navigation by detecting tokens under the cursor and emitting custom events that can be handled\n  * by external code to implement go-to-definition, symbol navigation, or other link-based functionality.\n  *\n  * **Enable:** `editor.setOption(\"enableLinking\", true)`\n  * @module\n  */\n  var Editor = require(\"../editor\").Editor;\n  require(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    enableLinking: {\n      set: function (val) {\n        if (val) {\n          this.on(\"click\", onClick);\n          this.on(\"mousemove\", onMouseMove);\n        } else {\n          this.off(\"click\", onClick);\n          this.off(\"mousemove\", onMouseMove);\n        }\n      },\n      value: false\n    }\n  });\n  exports.previousLinkingHover = false;\n  function onMouseMove(e) {\n    var editor = e.editor;\n    var ctrl = e.getAccelKey();\n    if (ctrl) {\n      var editor = e.editor;\n      var docPos = e.getDocumentPosition();\n      var session = editor.session;\n      var token = session.getTokenAt(docPos.row, docPos.column);\n      if (exports.previousLinkingHover && exports.previousLinkingHover != token) {\n        editor._emit(\"linkHoverOut\");\n      }\n      editor._emit(\"linkHover\", {\n        position: docPos,\n        token: token\n      });\n      exports.previousLinkingHover = token;\n    } else if (exports.previousLinkingHover) {\n      editor._emit(\"linkHoverOut\");\n      exports.previousLinkingHover = false;\n    }\n  }\n  function onClick(e) {\n    var ctrl = e.getAccelKey();\n    var button = e.getButton();\n    if (button == 0 && ctrl) {\n      var editor = e.editor;\n      var docPos = e.getDocumentPosition();\n      var session = editor.session;\n      var token = session.getTokenAt(docPos.row, docPos.column);\n      editor._emit(\"linkClick\", {\n        position: docPos,\n        token: token\n      });\n    }\n  }\n});\n(function () {\n  ace.require([\"ace/ext/linking\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}