{"code":"ace.define(\"ace/ext/code_lens\",[\"require\",\"exports\",\"module\",\"ace/lib/event\",\"ace/lib/lang\",\"ace/lib/dom\",\"ace/editor\",\"ace/config\"],function(e,n,o){\"use strict\";var t=e(\"../lib/event\"),r=e(\"../lib/lang\"),i=e(\"../lib/dom\");function s(e,n){if(e&n.CHANGE_LINES||e&n.CHANGE_FULL||e&n.CHANGE_SCROLL||e&n.CHANGE_TEXT){var o=n.session,t=n.session.lineWidgets,r=n.$textLayer,s=r.$lenses;if(t){var a=n.$textLayer.$lines.cells,c=n.layerConfig,l=n.$padding;s||(s=r.$lenses=[]);for(var d=0,u=0;u<a.length;u++){var f=a[u].row,g=t[f],p=g&&g.lenses;if(p&&p.length){var v=s[d];v||(v=s[d]=i.buildDom([\"div\",{class:\"ace_codeLens\"}],n.container)),v.style.height=c.lineHeight+\"px\",d++;for(var L=0;L<p.length;L++){var h=v.childNodes[2*L];h||(0!=L&&v.appendChild(i.createTextNode(\"\\xa0|\\xa0\")),h=i.buildDom([\"a\"],v)),h.textContent=p[L].title,h.lensCommand=p[L]}for(;v.childNodes.length>2*L-1;)v.lastChild.remove();var m=n.$cursorLayer.getPixelPosition({row:f,column:0},!0).top-c.lineHeight*g.rowsAbove-c.offset;v.style.top=m+\"px\";var C=n.gutterWidth,$=o.getLine(f).search(/\\S|$/);-1==$&&($=0),C+=$*c.characterWidth,v.style.paddingLeft=l+C+\"px\"}}for(;d<s.length;)s.pop().remove()}else s&&function(e){var n=e.$textLayer,o=n.$lenses;o&&o.forEach(function(e){e.remove()}),n.$lenses=null}(n)}}function a(e){e.codeLensProviders=[],e.renderer.on(\"afterRender\",s),e.$codeLensClickHandler||(e.$codeLensClickHandler=function(n){var o=n.target.lensCommand;o&&(e.execCommand(o.id,o.arguments),e._emit(\"codeLensClick\",n))},t.addListener(e.container,\"click\",e.$codeLensClickHandler,e)),e.$updateLenses=function(){var o=e.session;if(o){var t=e.codeLensProviders.length,r=[];e.codeLensProviders.forEach(function(i){i.provideCodeLenses(o,function(i,s){i||(s.forEach(function(e){r.push(e)}),0==--t&&function(){var t=o.selection.cursor,i=o.documentToScreenRow(t),s=o.getScrollTop(),a=n.setLenses(o,r),c=o.$undoManager&&o.$undoManager.$lastDelta;if(c&&\"remove\"==c.action&&c.lines.length>1)return;var l=o.documentToScreenRow(t),d=e.renderer.layerConfig.lineHeight,u=o.getScrollTop()+(l-i)*d;0==a&&s<d/4&&s>-d/4&&(u=-d);o.setScrollTop(u)}())})})}};var o=r.delayedCall(e.$updateLenses);e.$updateLensesOnInput=function(){o.delay(250)},e.on(\"input\",e.$updateLensesOnInput)}n.setLenses=function(e,n){var o=Number.MAX_VALUE;return function(e){if(e.lineWidgets){var n=e.widgetManager;e.lineWidgets.forEach(function(e){e&&e.lenses&&n.removeLineWidget(e)})}}(e),n&&n.forEach(function(n){var t=n.start.row,r=n.start.column,i=e.lineWidgets&&e.lineWidgets[t];i&&i.lenses||(i=e.widgetManager.$registerLineWidget({rowCount:1,rowsAbove:1,row:t,column:r,lenses:[]})),i.lenses.push(n.command),t<o&&(o=t)}),e._emit(\"changeFold\",{data:{start:{row:o}}}),o},n.registerCodeLensProvider=function(e,n){e.setOption(\"enableCodeLens\",!0),e.codeLensProviders.push(n),e.$updateLensesOnInput()},n.clear=function(e){n.setLenses(e,null)};var c=e(\"../editor\").Editor;e(\"../config\").defineOptions(c.prototype,\"editor\",{enableCodeLens:{set:function(e){var n;e?a(this):((n=this).off(\"input\",n.$updateLensesOnInput),n.renderer.off(\"afterRender\",s),n.$codeLensClickHandler&&n.container.removeEventListener(\"click\",n.$codeLensClickHandler))}}}),i.importCssString(\"\\n.ace_codeLens {\\n    position: absolute;\\n    color: #aaa;\\n    font-size: 88%;\\n    background: inherit;\\n    width: 100%;\\n    display: flex;\\n    align-items: flex-end;\\n    pointer-events: none;\\n}\\n.ace_codeLens > a {\\n    cursor: pointer;\\n    pointer-events: auto;\\n}\\n.ace_codeLens > a:hover {\\n    color: #0000ff;\\n    text-decoration: underline;\\n}\\n.ace_dark > .ace_codeLens > a:hover {\\n    color: #4e94ce;\\n}\\n\",\"codelense.css\",!1)}),ace.require([\"ace/ext/code_lens\"],function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)});","name":"a2a7e645aacf92726281467c8e34bc0d.js","input":"ace.define(\"ace/ext/code_lens\", [\"require\", \"exports\", \"module\", \"ace/lib/event\", \"ace/lib/lang\", \"ace/lib/dom\", \"ace/editor\", \"ace/config\"], function (require, exports, module) {\n  /**\n  * ## Code Lens extension.\n  *\n  * Displaying contextual information and clickable commands above code lines. Supports registering custom providers,\n  * rendering lens widgets with proper positioning and styling, and handling user interactions with lens commands.\n  * @module\n  */\n  \"use strict\";\n\n  var event = require(\"../lib/event\");\n  var lang = require(\"../lib/lang\");\n  var dom = require(\"../lib/dom\");\n  function clearLensElements(renderer) {\n    var textLayer = renderer.$textLayer;\n    var lensElements = textLayer.$lenses;\n    if (lensElements) lensElements.forEach(function (el) {\n      el.remove();\n    });\n    textLayer.$lenses = null;\n  }\n  function renderWidgets(changes, renderer) {\n    var changed = changes & renderer.CHANGE_LINES || changes & renderer.CHANGE_FULL || changes & renderer.CHANGE_SCROLL || changes & renderer.CHANGE_TEXT;\n    if (!changed) return;\n    var session = renderer.session;\n    var lineWidgets = renderer.session.lineWidgets;\n    var textLayer = renderer.$textLayer;\n    var lensElements = textLayer.$lenses;\n    if (!lineWidgets) {\n      if (lensElements) clearLensElements(renderer);\n      return;\n    }\n    var textCells = renderer.$textLayer.$lines.cells;\n    var config = renderer.layerConfig;\n    var padding = renderer.$padding;\n    if (!lensElements) lensElements = textLayer.$lenses = [];\n    var index = 0;\n    for (var i = 0; i < textCells.length; i++) {\n      var row = textCells[i].row;\n      var widget = lineWidgets[row];\n      var lenses = widget && widget.lenses;\n      if (!lenses || !lenses.length) continue;\n      var lensContainer = lensElements[index];\n      if (!lensContainer) {\n        lensContainer = lensElements[index] = dom.buildDom([\"div\", {\n          class: \"ace_codeLens\"\n        }], renderer.container);\n      }\n      lensContainer.style.height = config.lineHeight + \"px\";\n      index++;\n      for (var j = 0; j < lenses.length; j++) {\n        var el = lensContainer.childNodes[2 * j];\n        if (!el) {\n          if (j != 0) lensContainer.appendChild(dom.createTextNode(\"\\xa0|\\xa0\"));\n          el = dom.buildDom([\"a\"], lensContainer);\n        }\n        el.textContent = lenses[j].title;\n        el.lensCommand = lenses[j];\n      }\n      while (lensContainer.childNodes.length > 2 * j - 1) lensContainer.lastChild.remove();\n      var top = renderer.$cursorLayer.getPixelPosition({\n        row: row,\n        column: 0\n      }, true).top - config.lineHeight * widget.rowsAbove - config.offset;\n      lensContainer.style.top = top + \"px\";\n      var left = renderer.gutterWidth;\n      var indent = session.getLine(row).search(/\\S|$/);\n      if (indent == -1) indent = 0;\n      left += indent * config.characterWidth;\n      lensContainer.style.paddingLeft = padding + left + \"px\";\n    }\n    while (index < lensElements.length) lensElements.pop().remove();\n  }\n  function clearCodeLensWidgets(session) {\n    if (!session.lineWidgets) return;\n    var widgetManager = session.widgetManager;\n    session.lineWidgets.forEach(function (widget) {\n      if (widget && widget.lenses) widgetManager.removeLineWidget(widget);\n    });\n  }\n  exports.setLenses = function (session, lenses) {\n    var firstRow = Number.MAX_VALUE;\n    clearCodeLensWidgets(session);\n    lenses && lenses.forEach(function (lens) {\n      var row = lens.start.row;\n      var column = lens.start.column;\n      var widget = session.lineWidgets && session.lineWidgets[row];\n      if (!widget || !widget.lenses) {\n        widget = session.widgetManager.$registerLineWidget({\n          rowCount: 1,\n          rowsAbove: 1,\n          row: row,\n          column: column,\n          lenses: []\n        });\n      }\n      widget.lenses.push(lens.command);\n      if (row < firstRow) firstRow = row;\n    });\n    session._emit(\"changeFold\", {\n      data: {\n        start: {\n          row: firstRow\n        }\n      }\n    });\n    return firstRow;\n  };\n  function attachToEditor(editor) {\n    editor.codeLensProviders = [];\n    editor.renderer.on(\"afterRender\", renderWidgets);\n    if (!editor.$codeLensClickHandler) {\n      editor.$codeLensClickHandler = function (e) {\n        var command = e.target.lensCommand;\n        if (!command) return;\n        editor.execCommand(command.id, command.arguments);\n        editor._emit(\"codeLensClick\", e);\n      };\n      event.addListener(editor.container, \"click\", editor.$codeLensClickHandler, editor);\n    }\n    editor.$updateLenses = function () {\n      var session = editor.session;\n      if (!session) return;\n      var providersToWaitNum = editor.codeLensProviders.length;\n      var lenses = [];\n      editor.codeLensProviders.forEach(function (provider) {\n        provider.provideCodeLenses(session, function (err, payload) {\n          if (err) return;\n          payload.forEach(function (lens) {\n            lenses.push(lens);\n          });\n          providersToWaitNum--;\n          if (providersToWaitNum == 0) {\n            applyLenses();\n          }\n        });\n      });\n      function applyLenses() {\n        var cursor = session.selection.cursor;\n        var oldRow = session.documentToScreenRow(cursor);\n        var scrollTop = session.getScrollTop();\n        var firstRow = exports.setLenses(session, lenses);\n        var lastDelta = session.$undoManager && session.$undoManager.$lastDelta;\n        if (lastDelta && lastDelta.action == \"remove\" && lastDelta.lines.length > 1) return;\n        var row = session.documentToScreenRow(cursor);\n        var lineHeight = editor.renderer.layerConfig.lineHeight;\n        var top = session.getScrollTop() + (row - oldRow) * lineHeight;\n        if (firstRow == 0 && scrollTop < lineHeight / 4 && scrollTop > -lineHeight / 4) {\n          top = -lineHeight;\n        }\n        session.setScrollTop(top);\n      }\n    };\n    var updateLenses = lang.delayedCall(editor.$updateLenses);\n    editor.$updateLensesOnInput = function () {\n      updateLenses.delay(250);\n    };\n    editor.on(\"input\", editor.$updateLensesOnInput);\n  }\n  function detachFromEditor(editor) {\n    editor.off(\"input\", editor.$updateLensesOnInput);\n    editor.renderer.off(\"afterRender\", renderWidgets);\n    if (editor.$codeLensClickHandler) editor.container.removeEventListener(\"click\", editor.$codeLensClickHandler);\n  }\n  exports.registerCodeLensProvider = function (editor, codeLensProvider) {\n    editor.setOption(\"enableCodeLens\", true);\n    editor.codeLensProviders.push(codeLensProvider);\n    editor.$updateLensesOnInput();\n  };\n  exports.clear = function (session) {\n    exports.setLenses(session, null);\n  };\n  var Editor = require(\"../editor\").Editor;\n  require(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    enableCodeLens: {\n      set: function (val) {\n        if (val) {\n          attachToEditor(this);\n        } else {\n          detachFromEditor(this);\n        }\n      }\n    }\n  });\n  dom.importCssString(\"\\n.ace_codeLens {\\n    position: absolute;\\n    color: #aaa;\\n    font-size: 88%;\\n    background: inherit;\\n    width: 100%;\\n    display: flex;\\n    align-items: flex-end;\\n    pointer-events: none;\\n}\\n.ace_codeLens > a {\\n    cursor: pointer;\\n    pointer-events: auto;\\n}\\n.ace_codeLens > a:hover {\\n    color: #0000ff;\\n    text-decoration: underline;\\n}\\n.ace_dark > .ace_codeLens > a:hover {\\n    color: #4e94ce;\\n}\\n\", \"codelense.css\", false);\n});\n(function () {\n  ace.require([\"ace/ext/code_lens\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();"}